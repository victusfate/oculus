// Generated by CoffeeScript 2.3.1
(function() {
  var State, StateVal, copy;

  copy = require('copyjs');

  State = class State {
    constructor(name1, subscribers1 = {}, publishers = {}) {
      var k, v;
      this.name = name1;
      this.subscribers = subscribers1;
      // console.log { status: 'State constructor', name: @name, subscribers:@subscribers, publishers: publishers }
      if (this.name == null) {
        throw 'ill defined State without a name';
      }
      for (k in publishers) {
        v = publishers[k];
        if (this !== v) {
          v.addSubscriber(this);
        }
      }
    }

    updateSelf(obj, cb) {
      // console.log { status: 'State.updateSelf, override for specific behavior', obj:obj }
      return false;
    }

    publish(obj, cb) {
      var k, ref, v;
      // if state changes, update subscribers (todo avoid cycles, a publishes to b publishes to a...)
      // console.log { status: 'State publish', name: @name, subscribers:@subscribers  }
      if (this.updateSelf(obj)) {
        ref = this.subscribers;
        for (k in ref) {
          v = ref[k];
          console.log({
            status: 'State.publish',
            name: this.name,
            'going to publish': this !== v,
            self: this
          });
          if (this !== v) { // avoid recursive object loops... for now
            v.publish(this);
          }
        }
      }
      if (cb) {
        return cb();
      }
    }

    // addSubscriber to changes
    addSubscriber(obj) {
      if (this.subscribers == null) {
        // console.log { status: 'StateVal.addSubscriber', obj:obj }
        this.subscribers = {};
      }
      return this.subscribers[obj.name] = obj;
    }

    // two objects connect and subscribe to each others changes
    connect(obj) {
      // console.log { status: 'StateVal.connect', obj:obj }
      // circular reference, states subscribe to each other's changes
      this.addSubscriber(obj);
      return obj.addSubscriber(this);
    }

  };

  // value based stats
  StateVal = class StateVal extends State {
    constructor(name, val, subscribers, publishers) {
      super(name, subscribers, publishers);
      this.val = val;
      // console.log { status: 'StateVal constructor', name: @name, val:@val, subscribers:@subscribers, publishers:@publishers }
      this;
    }

    updateSelf(obj, cb) {
      var pre;
      // console.log { status: 'StateVal.updateSelf', obj:obj }
      pre = copy(this.val);
      if (typeof obj.val === 'function') {
        this.val = obj.val();
      } else {
        if (obj.val != null) {
          this.val = obj.val;
        }
      }
      // console.log { status: 'StateVal.updateSelf', name: @name, 'going to return': pre != @val, pre: pre, post: @val } 
      return pre !== this.val;
    }

  };

  module.exports = {
    State: State,
    StateVal: StateVal
  };

}).call(this);
